{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nexport default {\n  data() {\n    return {\n      cartItems: [] // Initialize an empty array for cart items\n    };\n  },\n  computed: {\n    // Calculate the total number of items in the cart\n    totalItems() {\n      return this.cartItems.reduce((sum, item) => sum + item.quantity, 0);\n    },\n    // Calculate the total cost of items in the cart\n    totalCost() {\n      return this.cartItems.reduce((sum, item) => sum + (Number(item.price) || 0) * item.quantity, 0);\n    }\n  },\n  methods: {\n    // Initialize the cart from localStorage when the component is created\n    loadCartFromLocalStorage() {\n      const savedCart = localStorage.getItem('cartItems');\n      if (savedCart) {\n        this.cartItems = JSON.parse(savedCart);\n      }\n    },\n    // Save the cart to localStorage\n    saveCartToLocalStorage() {\n      localStorage.setItem('cartItems', JSON.stringify(this.cartItems));\n    },\n    // Increment the quantity of an item\n    incrementQuantity(item) {\n      item.quantity++;\n      this.saveCartToLocalStorage(); // Update the cart in local storage\n    },\n    // Decrement the quantity of an item\n    decrementQuantity(item) {\n      if (item.quantity > 1) {\n        item.quantity--;\n        this.saveCartToLocalStorage(); // Update the cart in local storage\n      }\n    },\n    // Remove an item from the cart\n    removeItem(itemId) {\n      this.cartItems = this.cartItems.filter(item => item.id !== itemId);\n      this.saveCartToLocalStorage(); // Sync the updated cart with local storage\n    },\n    // Handle changes to the quantity input\n    updateLocalCart() {\n      this.saveCartToLocalStorage(); // Update the cart in local storage whenever quantity changes\n    },\n    // Handle the checkout process\n    checkout() {\n      this.$router.push('/checkout'); // Navigate to the /checkout page\n    }\n  },\n  // Load the cart items when the component is created\n  created() {\n    this.loadCartFromLocalStorage();\n  }\n};","map":{"version":3,"names":["data","cartItems","computed","totalItems","reduce","sum","item","quantity","totalCost","Number","price","methods","loadCartFromLocalStorage","savedCart","localStorage","getItem","JSON","parse","saveCartToLocalStorage","setItem","stringify","incrementQuantity","decrementQuantity","removeItem","itemId","filter","id","updateLocalCart","checkout","$router","push","created"],"sources":["C:\\laragon\\www\\project_appdev\\Frontend\\src\\views\\cart.vue"],"sourcesContent":["<template>\n  <div class=\"cart-page\">\n    <div class=\"cart-container\">\n      <!-- Shopping Cart Section -->\n      <div class=\"cart\">\n        <h2 class=\"cart-title\">Shopping Cart</h2>\n        <p class=\"cart-items-count\">{{ totalItems }} items</p>\n\n        <div v-if=\"cartItems.length > 0\" class=\"cart-items-list\">\n          <!-- Loop through cart items -->\n          <div v-for=\"item in cartItems\" :key=\"item.id\" class=\"cart-item\">\n            <img :src=\"item.image\" alt=\"Item image\" class=\"cart-item-image\" />\n            <div class=\"cart-item-details\">\n              <h3 class=\"item-name\">{{ item.name }}</h3>\n              <p class=\"item-price\">₱{{ (Number(item.price) || 0).toFixed(2) }}</p>\n              <div class=\"quantity-controls\">\n                <button @click=\"decrementQuantity(item)\">-</button>\n                <input\n                  type=\"number\"\n                  v-model.number=\"item.quantity\"\n                  min=\"1\"\n                  class=\"quantity-input\"\n                  @change=\"updateLocalCart\"\n                />\n                <button @click=\"incrementQuantity(item)\">+</button>\n              </div>\n            </div>\n            <button @click=\"removeItem(item.id)\" class=\"remove-button\">✕</button>\n          </div>\n        </div>\n\n        <div v-else class=\"empty-cart\">\n          <p>Your cart is empty. Start shopping now!</p>\n        </div>\n\n        <a href=\"/product\" class=\"back-to-shop\">← Back to shop</a>\n      </div>\n\n      <!-- Summary Section -->\n      <div class=\"summary\">\n        <h2 class=\"summary-title\">Summary</h2>\n        <div class=\"summary-item\">\n          <span>ITEMS {{ totalItems }}</span>\n          <span>₱{{ totalCost.toFixed(2) }}</span>\n        </div>\n        <div class=\"summary-item\">\n          <label for=\"shipping\">SHIPPING</label>\n          <select id=\"shipping\" class=\"shipping-select\">\n            <option value=\"58\">Standard Delivery - ₱58.00</option>\n          </select>\n        </div>\n        <div class=\"summary-item\">\n          <label for=\"give-code\">Voucher</label> <br>\n          <div class=\"give-code-container\">\n            <input type=\"text\" id=\"give-code\" placeholder=\"Enter your code\" />\n            <button>→</button>\n          </div>\n        </div>\n        <div class=\"summary-total\">\n          <span>TOTAL PRICE</span>\n          <span>₱{{ (totalCost + 58).toFixed(2) }}</span>\n        </div>\n        <button @click=\"checkout\" class=\"checkout-button\">CHECKOUT</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      cartItems: [], // Initialize an empty array for cart items\n    };\n  },\n  computed: {\n    // Calculate the total number of items in the cart\n    totalItems() {\n      return this.cartItems.reduce((sum, item) => sum + item.quantity, 0);\n    },\n    // Calculate the total cost of items in the cart\n    totalCost() {\n      return this.cartItems.reduce(\n        (sum, item) => sum + (Number(item.price) || 0) * item.quantity,\n        0\n      );\n    },\n  },\n  methods: {\n    // Initialize the cart from localStorage when the component is created\n    loadCartFromLocalStorage() {\n      const savedCart = localStorage.getItem('cartItems');\n      if (savedCart) {\n        this.cartItems = JSON.parse(savedCart);\n      }\n    },\n\n    // Save the cart to localStorage\n    saveCartToLocalStorage() {\n      localStorage.setItem('cartItems', JSON.stringify(this.cartItems));\n    },\n\n    // Increment the quantity of an item\n    incrementQuantity(item) {\n      item.quantity++;\n      this.saveCartToLocalStorage(); // Update the cart in local storage\n    },\n\n    // Decrement the quantity of an item\n    decrementQuantity(item) {\n      if (item.quantity > 1) {\n        item.quantity--;\n        this.saveCartToLocalStorage(); // Update the cart in local storage\n      }\n    },\n\n    // Remove an item from the cart\n    removeItem(itemId) {\n      this.cartItems = this.cartItems.filter((item) => item.id !== itemId);\n      this.saveCartToLocalStorage(); // Sync the updated cart with local storage\n    },\n\n    // Handle changes to the quantity input\n    updateLocalCart() {\n      this.saveCartToLocalStorage(); // Update the cart in local storage whenever quantity changes\n    },\n\n    // Handle the checkout process\n    checkout() {\n      this.$router.push('/checkout'); // Navigate to the /checkout page\n    },\n  },\n\n  // Load the cart items when the component is created\n  created() {\n    this.loadCartFromLocalStorage();\n  },\n};\n</script>\n\n\n<style scoped>\n.cart-page {\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  padding: 30px;\n  background-color: #f4f4f4;\n}\n\n.cart-container {\n  display: flex;\n  width: 90%;\n  max-width: 1200px;\n  gap: 30px;\n}\n\n.cart {\n  flex: 2;\n  background-color: #fff;\n  padding: 40px;\n  border-radius: 10px;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.cart-title {\n  font-size: 1.8rem;\n  font-weight: bold;\n  margin-bottom: 25px;\n}\n\n.cart-items-count {\n  font-size: 1rem;\n  color: #666;\n  margin-bottom: 20px;\n}\n\n.cart-items-list {\n  margin-top: 20px;\n}\n\n.cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  padding-bottom: 15px;\n  border-bottom: 1px solid #ddd;\n}\n\n.cart-item-image {\n  width: 60px;\n  height: 60px;\n  object-fit: cover;\n  border-radius: 8px;\n}\n\n.cart-item-details {\n  flex: 1;\n  margin-left: 15px;\n}\n\n.item-name {\n  font-size: 1rem;\n  font-weight: 500;\n  margin-bottom: 5px;\n}\n\n.item-price {\n  color: #888;\n  font-size: 0.9rem;\n  margin-bottom: 10px;\n}\n\n.quantity-controls {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.quantity-input {\n  width: 50px;\n  text-align: center;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n}\n\n.remove-button {\n  background: none;\n  border: none;\n  font-size: 1.5rem;\n  color: #888;\n  cursor: pointer;\n}\n\n.remove-button:hover {\n  color: #f00;\n}\n\n.back-to-shop {\n  display: inline-block;\n  margin-top: 30px;\n  color: #141516;\n  text-decoration: none;\n  font-size: 0.9rem;\n}\n\n.back-to-shop:hover {\n  text-decoration: underline;\n}\n\n.summary {\n  flex: 1;\n  background-color: #f7f7f7;\n  padding: 30px;\n  border-radius: 10px;\n  text-align: left;\n  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.summary-title {\n  font-size: 1.5rem;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.summary-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  font-size: 1rem;\n  color: #333;\n}\n\n.shipping-select {\n  width: 100%;\n  padding: 8px;\n  margin-top: 10px;\n  border: 1px solid #ddd;\n  background-color: #fff;\n  border-radius: 5px;\n}\n\n.give-code-container {\n  display: flex;\n  gap: 10px;\n  margin-top: 10px;\n}\n\n.give-code-container input {\n  flex: 1;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n}\n\n.give-code-container button {\n  background-color: #000;\n  color: #fff;\n  border: none;\n  padding: 0 20px;\n  font-size: 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.give-code-container button:hover {\n  background-color: #333;\n}\n\n.summary-total {\n  display: flex;\n  justify-content: space-between;\n  font-size: 1.2rem;\n  font-weight: bold;\n  margin-top: 30px;\n}\n\n.checkout-button {\n  width: 100%;\n  padding: 15px;\n  margin-top: 20px;\n  background-color: #000;\n  color: #fff;\n  font-size: 1.1rem;\n  border: none;\n  cursor: pointer;\n  border-radius: 5px;\n  text-transform: uppercase;\n}\n\n.checkout-button:hover {\n  background-color: #333;\n}\n</style>\n"],"mappings":";;;;AAqEA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE,CAAE;IACjB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,UAAUA,CAAA,EAAG;MACX,OAAO,IAAI,CAACF,SAAS,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAE,GAAIC,IAAI,CAACC,QAAQ,EAAE,CAAC,CAAC;IACrE,CAAC;IACD;IACAC,SAASA,CAAA,EAAG;MACV,OAAO,IAAI,CAACP,SAAS,CAACG,MAAM,CAC1B,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAE,GAAI,CAACI,MAAM,CAACH,IAAI,CAACI,KAAK,KAAK,CAAC,IAAIJ,IAAI,CAACC,QAAQ,EAC9D,CACF,CAAC;IACH;EACF,CAAC;EACDI,OAAO,EAAE;IACP;IACAC,wBAAwBA,CAAA,EAAG;MACzB,MAAMC,SAAQ,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MACnD,IAAIF,SAAS,EAAE;QACb,IAAI,CAACZ,SAAQ,GAAIe,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC;MACxC;IACF,CAAC;IAED;IACAK,sBAAsBA,CAAA,EAAG;MACvBJ,YAAY,CAACK,OAAO,CAAC,WAAW,EAAEH,IAAI,CAACI,SAAS,CAAC,IAAI,CAACnB,SAAS,CAAC,CAAC;IACnE,CAAC;IAED;IACAoB,iBAAiBA,CAACf,IAAI,EAAE;MACtBA,IAAI,CAACC,QAAQ,EAAE;MACf,IAAI,CAACW,sBAAsB,CAAC,CAAC,EAAE;IACjC,CAAC;IAED;IACAI,iBAAiBA,CAAChB,IAAI,EAAE;MACtB,IAAIA,IAAI,CAACC,QAAO,GAAI,CAAC,EAAE;QACrBD,IAAI,CAACC,QAAQ,EAAE;QACf,IAAI,CAACW,sBAAsB,CAAC,CAAC,EAAE;MACjC;IACF,CAAC;IAED;IACAK,UAAUA,CAACC,MAAM,EAAE;MACjB,IAAI,CAACvB,SAAQ,GAAI,IAAI,CAACA,SAAS,CAACwB,MAAM,CAAEnB,IAAI,IAAKA,IAAI,CAACoB,EAAC,KAAMF,MAAM,CAAC;MACpE,IAAI,CAACN,sBAAsB,CAAC,CAAC,EAAE;IACjC,CAAC;IAED;IACAS,eAAeA,CAAA,EAAG;MAChB,IAAI,CAACT,sBAAsB,CAAC,CAAC,EAAE;IACjC,CAAC;IAED;IACAU,QAAQA,CAAA,EAAG;MACT,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,WAAW,CAAC,EAAE;IAClC;EACF,CAAC;EAED;EACAC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACnB,wBAAwB,CAAC,CAAC;EACjC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}